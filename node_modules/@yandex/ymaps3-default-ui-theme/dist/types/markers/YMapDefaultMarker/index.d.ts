/// <reference types="react" />
import { LngLat, YMapMarkerProps } from '@yandex/ymaps3-types';
import { IconColor, IconName } from '../../icons';
import { YMapPopupMarkerProps } from '../YMapPopupMarker';
import { DefaultProps } from './props';
import './index.css';
export type ThemesColor = {
    day: string;
    night: string;
    iconDay?: string;
    iconNight?: string;
    strokeDay?: string;
    strokeNight?: string;
};
export type MarkerColorProps = IconColor | ThemesColor;
export type MarkerSizeProps = 'normal' | 'small' | 'micro';
export type MarkerPopupProps = Omit<YMapPopupMarkerProps, keyof YMapMarkerProps>;
export type YMapDefaultMarkerProps = YMapMarkerProps & {
    iconName?: IconName;
    color?: MarkerColorProps;
    size?: MarkerSizeProps;
    title?: string;
    subtitle?: string;
    staticHint?: boolean;
    popup?: MarkerPopupProps;
};
export declare class YMapDefaultMarker extends ymaps3.YMapComplexEntity<YMapDefaultMarkerProps, DefaultProps> {
    static defaultProps: Readonly<{
        color: "red";
        size: "small";
        staticHint: true;
    }>;
    static [ymaps3.overrideKeyReactify]: import("@yandex/ymaps3-types/reactify/reactify").CustomReactify<YMapDefaultMarker, import("react").ForwardRefExoticComponent<{
        source?: string;
        zIndex?: number;
        onDragMove?: import("@yandex/ymaps3-types/imperative/YMapMarker").YMapMarkerEventHandler;
        onDragStart?: import("@yandex/ymaps3-types/imperative/YMapMarker").YMapMarkerEventHandler;
        onDragEnd?: import("@yandex/ymaps3-types/imperative/YMapMarker").YMapMarkerEventHandler;
        draggable?: boolean;
        mapFollowsOnDrag?: boolean | {
            activeZoneMargin?: import("@yandex/ymaps3-types/common/types/margin").Margin;
        };
        blockEvents?: boolean;
        blockBehaviors?: boolean;
        hideOutsideViewport?: import("@yandex/ymaps3-types/common/types/graphics").HideOutsideRule;
        coordinates: LngLat;
        properties?: Record<string, unknown>;
        id?: string;
        disableRoundCoordinates?: boolean;
        onDoubleClick?: (event: MouseEvent, mapEvent: import("@yandex/ymaps3-types/imperative/YMapFeature/types").MapEvent) => void;
        onClick?: (event: MouseEvent, mapEvent: import("@yandex/ymaps3-types/imperative/YMapFeature/types").MapEvent) => void;
        onFastClick?: (event: MouseEvent, mapEvent: import("@yandex/ymaps3-types/imperative/YMapFeature/types").MapEvent) => void;
        title?: string;
        color?: MarkerColorProps;
        size?: MarkerSizeProps;
        staticHint?: boolean;
        iconName?: IconName;
        subtitle?: string;
        popup?: Omit<MarkerPopupProps, "content"> & {
            content: string | (() => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>);
        };
        ref?: import("react").Ref<import("@yandex/ymaps3-types/imperative/YMapEnities").YMapEntity<YMapDefaultMarkerProps, {}>>;
        key?: import("react").Key;
    }>>;
    static [ymaps3.overrideKeyVuefy]: import("@yandex/ymaps3-types/modules/vuefy").CustomVuefyFn<YMapDefaultMarker>;
    static [ymaps3.optionsKeyVuefy]: import("@yandex/ymaps3-types/modules/vuefy").CustomVuefyOptions<YMapDefaultMarker, Omit<YMapDefaultMarkerProps, "popup"> & {
        popup: {
            position?: import("../YMapPopupMarker").YMapPopupPositionProps;
            offset?: number;
            show?: boolean;
            onClose?: () => void;
            onOpen?: () => void;
        };
    }>;
    private _marker;
    private _markerElement;
    private _color;
    private _background;
    private _stroke?;
    private _icon?;
    private _hintContainer;
    private _titleHint;
    private _subtitleHint;
    private _popup?;
    get coordinates(): LngLat;
    constructor(props: YMapDefaultMarkerProps);
    protected _onAttach(): void;
    protected _onUpdate(propsDiff: Partial<YMapDefaultMarkerProps>, oldProps: YMapDefaultMarkerProps): void;
    protected _onDetach(): void;
    private _createPopupMarker;
    private _createHintContainer;
    private _onMarkerClick;
    private _onMarkerDragMove;
    private _updateTheme;
    private _updateMarkerSize;
    private _updateSVG;
    private _getPopupOffset;
    private _getIcon;
    private _getColor;
    private _createNormalPin;
    private _createSmallPoi;
    private _createMicroPoi;
}
