/// <reference types="react" />
import { LngLat, YMapMarkerProps } from '@yandex/ymaps3-types';
import { DefaultProps } from './props';
import './index.css';
type VerticalPosition = 'top' | 'bottom';
type HorizontalPosition = 'left' | 'right';
export type YMapPopupPositionProps = VerticalPosition | HorizontalPosition | `${VerticalPosition} ${HorizontalPosition}` | `${HorizontalPosition} ${VerticalPosition}`;
export type YMapPopupContentProps = string | (() => HTMLElement);
export type YMapPopupMarkerProps = YMapMarkerProps & {
    /** The function of creating popup content */
    content: YMapPopupContentProps;
    /** The position of the popup in relation to the point it is pointing to */
    position?: YMapPopupPositionProps;
    /** The offset in pixels between the popup pointer and the point it is pointing to. */
    offset?: number;
    /** Hide or show popup on map */
    show?: boolean;
    /** Popup closing callback */
    onClose?: () => void;
    /** Popup opening callback */
    onOpen?: () => void;
};
/**
 * `YMapPopupMarker` is a popup with customized content.
 * @example
 * ```js
 * const popup = new YMapPopupMarker({
 *  content: () => createPopupContentHTMLElement(),
 *  position: 'top',
 *  onOpen:() => console.log('open'),
 *  onClose:() => console.log('close'),
 *  // support YMapMarker props
 *  coordinates: POPUP_COORD,
 *  draggable: true,
 * });
 * map.addChild(popup);
 * ```
 */
export declare class YMapPopupMarker extends ymaps3.YMapComplexEntity<YMapPopupMarkerProps, DefaultProps> {
    static defaultProps: Readonly<{
        position: "top";
        offset: 0;
        show: true;
    }>;
    static [ymaps3.overrideKeyReactify]: import("@yandex/ymaps3-types/reactify/reactify").CustomReactify<YMapPopupMarker, import("react").ForwardRefExoticComponent<{
        source?: string;
        zIndex?: number;
        onDragMove?: import("@yandex/ymaps3-types/imperative/YMapMarker").YMapMarkerEventHandler;
        onDragStart?: import("@yandex/ymaps3-types/imperative/YMapMarker").YMapMarkerEventHandler;
        onDragEnd?: import("@yandex/ymaps3-types/imperative/YMapMarker").YMapMarkerEventHandler;
        draggable?: boolean;
        mapFollowsOnDrag?: boolean | {
            activeZoneMargin?: import("@yandex/ymaps3-types/common/types/margin").Margin;
        };
        blockEvents?: boolean;
        blockBehaviors?: boolean;
        hideOutsideViewport?: import("@yandex/ymaps3-types/common/types/graphics").HideOutsideRule;
        coordinates: LngLat;
        properties?: Record<string, unknown>;
        id?: string;
        disableRoundCoordinates?: boolean;
        onDoubleClick?: (event: MouseEvent, mapEvent: import("@yandex/ymaps3-types/imperative/YMapFeature/types").MapEvent) => void;
        onClick?: (event: MouseEvent, mapEvent: import("@yandex/ymaps3-types/imperative/YMapFeature/types").MapEvent) => void;
        onFastClick?: (event: MouseEvent, mapEvent: import("@yandex/ymaps3-types/imperative/YMapFeature/types").MapEvent) => void;
        position?: YMapPopupPositionProps;
        offset?: number;
        show?: boolean;
        onClose?: () => void;
        onOpen?: () => void;
        content: string | (() => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>);
        ref?: import("react").Ref<import("@yandex/ymaps3-types/imperative/YMapEnities").YMapEntity<YMapPopupMarkerProps, {}>>;
        key?: import("react").Key;
    }>>;
    static [ymaps3.overrideKeyVuefy]: import("@yandex/ymaps3-types/modules/vuefy").CustomVuefyFn<YMapPopupMarker>;
    static [ymaps3.optionsKeyVuefy]: import("@yandex/ymaps3-types/modules/vuefy").CustomVuefyOptions<YMapPopupMarker>;
    get isOpen(): boolean;
    private _markerElement;
    private _popupContainer;
    private _popupTail;
    private _marker;
    get coordinates(): LngLat;
    private _togglePopup;
    protected _onAttach(): void;
    protected _onUpdate(propsDiff: Partial<YMapPopupMarkerProps>): void;
    protected _onDetach(): void;
    private _updateTheme;
    private _updateOffset;
    private _updatePosition;
}
export {};
