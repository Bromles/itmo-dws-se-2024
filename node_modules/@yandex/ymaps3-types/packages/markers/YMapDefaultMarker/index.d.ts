import type { LngLat } from "../../../common/types";
import type { YMapMarkerProps } from "../../../imperative/YMapMarker";
type DefaultMarkerCustomProps = {
    /** Marker title HTML */
    title?: string;
    /** Marker subtitle HTML */
    subtitle?: string;
    /** Marker icon color */
    color?: string;
    /** Popup */
    popup?: {
        /** Popup content */
        content: string | ((close: () => void) => HTMLElement);
        /** Popup position */
        position: "left" | "right" | "top";
        /** Should popup hide marker. Default is false */
        hidesMarker?: boolean;
    };
};
/**
 * YMapDefaultMarker props
 */
type YMapDefaultMarkerProps = YMapMarkerProps & DefaultMarkerCustomProps;
declare const defaultProps: Readonly<{
    color: "#f33";
    hideOutsideViewport: true;
}>;
type DefaultProps = typeof defaultProps;
/**
 * Default marker.
 *
 * @example
 * ```javascript
 * const {YMapDefaultMarker} = await ymaps3.import('@yandex/ymaps3-markers@0.0.1');
 * map.addChild(new YMapDefaultMarker({
 *     coordinates: [34, 54],
 *     title: 'Hello World!',
 *     subtitle: 'kind and bright',
 *     color: 'blue'
 * }));
 * ```
 */
declare class YMapDefaultMarker extends ymaps3.YMapComplexEntity<YMapDefaultMarkerProps, DefaultProps> {
    static defaultProps: Readonly<{
        color: "#f33";
        hideOutsideViewport: true;
    }>;
    static [ymaps3.overrideKeyReactify]: import("../../../reactify/reactify").CustomReactify<YMapDefaultMarker, import("react").ForwardRefExoticComponent<{
        coordinates: LngLat;
        source?: string | undefined;
        zIndex?: number | undefined;
        properties?: Record<string, unknown> | undefined;
        id?: string | undefined;
        disableRoundCoordinates?: boolean | undefined;
        hideOutsideViewport?: import("../../../common/types/graphics").HideOutsideRule | undefined;
        draggable?: boolean | undefined;
        mapFollowsOnDrag?: boolean | {
            activeZoneMargin?: import("../../../common/types/margin").Margin | undefined;
        } | undefined;
        onDragStart?: import("../../../imperative/YMapMarker").YMapMarkerEventHandler | undefined;
        onDragEnd?: import("../../../imperative/YMapMarker").YMapMarkerEventHandler | undefined;
        onDragMove?: import("../../../imperative/YMapMarker").YMapMarkerEventHandler | undefined;
        blockEvents?: boolean | undefined;
        blockBehaviors?: boolean | undefined;
        onDoubleClick?: ((event: MouseEvent, mapEvent: import("../../../imperative/YMapFeature/types").MapEvent) => void) | undefined;
        onClick?: ((event: MouseEvent, mapEvent: import("../../../imperative/YMapFeature/types").MapEvent) => void) | undefined;
        onFastClick?: ((event: MouseEvent, mapEvent: import("../../../imperative/YMapFeature/types").MapEvent) => void) | undefined;
        title?: string | undefined;
        subtitle?: string | undefined;
        color?: string | undefined;
        popup?: {
            /** Popup content */
            content: string | ((close: () => void) => HTMLElement);
            /** Popup position */
            position: "top" | "left" | "right";
            /** Should popup hide marker. Default is false */
            hidesMarker?: boolean | undefined;
        } | undefined;
        children?: import("react").ReactNode;
        ref?: import("react").Ref<import("../../../imperative/YMapEnities").YMapEntity<YMapDefaultMarkerProps, {}>> | undefined;
        key?: import("react").Key | null | undefined;
    }>>;
    static [ymaps3.overrideKeyVuefy]: import("../../../modules/vuefy").CustomVuefyFn<YMapDefaultMarker>;
    static [ymaps3.optionsKeyVuefy]: import("../../../modules/vuefy").CustomVuefyOptions<YMapDefaultMarker>;
    private _marker;
    private _container;
    private _popup;
    private _popupIsOpen;
    private _popupProps;
    get coordinates(): LngLat;
    constructor(props: YMapDefaultMarkerProps);
    private _createMarker;
    private __onElementClick;
    private _togglePopup;
    private _createPopup;
    protected _onUpdate(changedProps: Partial<YMapDefaultMarkerProps>): void;
    private _getElement;
    /**
         * Hides/shows marker labels depending on whether they are empty
         */
    private _toggleCaption;
    private _createContainer;
}
export { YMapDefaultMarker, YMapDefaultMarkerProps, DefaultMarkerCustomProps };
