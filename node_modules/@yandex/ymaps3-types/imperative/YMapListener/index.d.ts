import type { IndoorPlan, PixelCoordinates } from "../../common/types";
import { YMapFeature } from "../YMapFeature";
import { YMapMarker } from "../YMapMarker";
import type { BehaviorType, LngLat } from "../../common/types";
import { YMapEntity } from "../YMapEnities";
import { YMapHotspot } from "../YMapHotspot";
import type { YMapCamera, YMapLocation } from "../YMap";
export interface DomEvent {
    coordinates: LngLat;
    screenCoordinates: [
        number,
        number
    ];
}
type HandlerEntity<TType extends string, TEntity> = {
    type: TType;
    entity: TEntity;
    layer: string;
    source: string;
};
export type DomEventHandlerObject = HandlerEntity<"feature", YMapFeature> | HandlerEntity<"marker", YMapMarker> | HandlerEntity<"hotspot", YMapHotspot> | undefined;
interface TileLayerState {
    /** Number of tiles loaded from the server. */
    tilesLoaded: number;
    /** Number of tiles ready to be displayed. */
    tilesReady: number;
    /** Total number of tiles in the visible area. */
    tilesTotal: number;
}
interface MapState {
    getLayerState(layerId: string, type: string, effectiveMode?: "raster" | "vector"): Record<string, unknown> | undefined;
    getLayerState(layerId: string, type: "tile", effectiveMode?: "raster" | "vector"): TileLayerState | undefined;
}
export type DomEventHandler = (object: DomEventHandlerObject, event: DomEvent) => void;
type Location = Required<YMapLocation>;
interface UpdateObject {
    type: "update";
    location: Location;
    camera: YMapCamera;
    mapInAction: boolean;
}
interface ResizeObject {
    type: "resize";
    size: Readonly<PixelCoordinates>;
    mapInAction: boolean;
}
type MapEventHandler<TObject> = (object: TObject) => void;
export type MapEventUpdateHandler = MapEventHandler<UpdateObject>;
export type MapEventResizeHandler = MapEventHandler<ResizeObject>;
export type MapEventReadyStateChangeHandler = MapEventHandler<MapState>;
export type IndoorPlansHandler = (object: {
    type: IndoorPlanType;
    indoorPlans: readonly IndoorPlan[] | null;
}) => void;
export type BehaviorMapEventHandler = (object: {
    type: BehaviorType;
    location: Location;
    camera: YMapCamera;
}) => void;
export type DomEvents = {
    onTouchStart: DomEventHandler;
    onTouchMove: DomEventHandler;
    onTouchEnd: DomEventHandler;
    onTouchCancel: DomEventHandler;
    onPointerDown: DomEventHandler;
    onPointerMove: DomEventHandler;
    onPointerUp: DomEventHandler;
    onPointerCancel: DomEventHandler;
    onFastClick: DomEventHandler;
    onClick: DomEventHandler;
    onDblClick: DomEventHandler;
    onMouseUp: DomEventHandler;
    onMouseDown: DomEventHandler;
    onMouseEnter: DomEventHandler;
    onMouseLeave: DomEventHandler;
    onMouseMove: DomEventHandler;
    onContextMenu: DomEventHandler;
    onRightDblClick: DomEventHandler;
};
export type MapEvents = {
    onUpdate: MapEventUpdateHandler;
    onResize: MapEventResizeHandler;
    onStateChanged: MapEventReadyStateChangeHandler;
};
export type BehaviorEvents = {
    onActionStart: BehaviorMapEventHandler;
    onActionEnd: BehaviorMapEventHandler;
};
type IndoorPlanType = "indoorPlansChanged";
export type NullablePartial<T> = {
    [P in keyof T]?: T[P] | null;
};
type DomEventsProps = Partial<DomEvents> & {
    layer?: string;
};
type YMapListenerProps = DomEventsProps | NullablePartial<MapEvents> | NullablePartial<BehaviorEvents>;
/**
 * A component for handling events of the map and its child elements. DOM events are also hung through this component.
 * @example
 * ```javascript
 * const clickCallback = () => alert("Clicked!");
 *
 * const mapListener = new YMapListener({
 *     layerId: "any",
 *     onClick: clickCallback,
 * });
 *
 * map.addChild(mapListener);
 * ```
 * @see [More about events](https://yandex.ru/dev/jsapi30/doc/en/dg/concepts/events)
 */
declare class YMapListener extends YMapEntity<YMapListenerProps> {
    private _domHandlers;
    private _mapHandlers;
    private _behaviorsHandlers;
    private _subscribeDomEvent;
    private _subscribeMapEvent;
    private _subscribeMapIndoorPlansEvent;
    private _subscribeMapStateChanged;
    private _subscribeActionEvent;
    private _subscribe;
    private _unsubscribe;
    protected _onAttach(): void;
    protected _onDetach(): void;
    protected _onUpdate(): void;
    private __getRealCookie;
}
export { YMapListener, YMapListenerProps };
