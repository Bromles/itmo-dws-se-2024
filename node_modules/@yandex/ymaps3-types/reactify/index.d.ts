import type { Reactify, ReactifyEntity, ReactifiedEntity, ReactifyModule, ReactifiedModule } from "./reactify";
import type { YMapReactContainer } from "../imperative/YMapReactContainer";
import { overrideKeyReactify } from "../imperative/wrappers";
type TReact = typeof import("react");
type TReactDOM = typeof import("react-dom");
export type { Reactify, ReactifyEntity, ReactifiedEntity, ReactifyModule, ReactifiedModule };
export type GenericReactify = {
    readonly overrideKey: typeof overrideKeyReactify;
    bindTo(React: TReact, ReactDOM: TReactDOM): Reactify;
};
export declare const reactify: Readonly<GenericReactify>;
declare module "./reactify" {
    interface ReactifyModule<TModule extends BaseModule = BaseModule> {
        (module: typeof import("../index")): ReactifiedModule<BaseModule & typeof import("../index") & {
            YMapReactContainer: typeof YMapReactContainer;
        }>;
    }
}
