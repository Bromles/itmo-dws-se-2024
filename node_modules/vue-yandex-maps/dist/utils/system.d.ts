import { ComputedGetter, ComputedRef, DebuggerOptions, Ref, UnwrapRef, VNodeArrayChildren, VNodeProps } from 'vue';
import { VueYandexMaps } from '../namespace.ts';
import YandexMapException = VueYandexMaps.YandexMapException;
/**
 * @description Prevents memory leak on SSR when ref is called outside setup
 */
export declare function safeRef<T = any>(value: T): Ref<UnwrapRef<T>>;
/**
 * @description Prevents memory leak on SSR when computed is called outside setup
 */
export declare function safeComputed<T>(getter: ComputedGetter<T>, debugOptions?: DebuggerOptions): ComputedRef<T>;
export declare function sleep(ms: number): Promise<unknown>;
export declare function copy<T, K = UnwrapRef<T>>(target: T): K;
export declare function isDev(): boolean | undefined;
interface ThrowExceptionSettings {
    text: string;
    isInternal?: boolean;
    warn?: boolean;
}
export declare function getException({ text, isInternal, warn, }: ThrowExceptionSettings): YandexMapException;
export declare function throwException(settings: Omit<ThrowExceptionSettings, 'warn'> & {
    warn: true;
}): void;
export declare function throwException(settings: Omit<ThrowExceptionSettings, 'warn'> & {
    warn?: false;
}): never;
export declare function excludeKeys(item: Record<string, any>, ignoreKeys: string[]): void;
export declare function isVue2(): boolean;
export declare function setFragment(): Promise<void>;
export declare function hF(children: VNodeArrayChildren, props?: (VNodeProps & Record<string, any>) | null): import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
    [key: string]: any;
}>;
/**
 * @description You can't render multiple root nodes in vue2
 */
export declare function hVue2(children: VNodeArrayChildren): import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
    [key: string]: any;
}> | VNodeArrayChildren;
export declare function getAttrsForVueVersion(attrs: Record<string, unknown>): Record<string, unknown>;
export {};
