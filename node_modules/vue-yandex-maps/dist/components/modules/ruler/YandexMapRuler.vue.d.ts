import { PropType, SlotsType } from 'vue';
import { YMapRuler } from '@yandex/ymaps3-types/modules/ruler';
import { RenderPointCommonArgs } from '@yandex/ymaps3-types/modules/ruler/YMapRulerCommon';
import { RenderPointArgs } from '@yandex/ymaps3-types/modules/ruler/YMapRuler';
import { YMapMarker } from '@yandex/ymaps3-types';
import { YandexMapMarkerCustomProps } from '../../../types/marker.ts';
type YMapRulerSettings = ConstructorParameters<typeof YMapRuler>[0];
export type YandexMapRulerSettings = Omit<YMapRulerSettings, 'point' | 'previewPoint'>;
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    value: {
        type: PropType<YMapRuler | null>;
        default: null;
    };
    modelValue: {
        type: PropType<YMapRuler | null>;
        default: null;
    };
    settings: {
        type: PropType<YandexMapRulerSettings>;
        default: () => {};
    };
    pointProps: {
        type: PropType<Omit<ConstructorParameters<typeof YMapMarker>[0] & YandexMapMarkerCustomProps, "coordinates" | "draggable" | "source">>;
        default: () => {};
    };
    previewPointProps: {
        type: PropType<YandexMapMarkerCustomProps | "fromPointProps">;
        default: () => {};
    };
    /**
   * @description readonly-array with all points states
   */
    pointsState: {
        type: PropType<RenderPointArgs[]>;
        default: () => never[];
    };
}>, () => import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
    [key: string]: any;
}> | import('vue').VNodeArrayChildren, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    input(item: YMapRuler): boolean;
    'update:modelValue'(item: YMapRuler): boolean;
    'update:pointsState'(item: RenderPointArgs[]): boolean;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    value: {
        type: PropType<YMapRuler | null>;
        default: null;
    };
    modelValue: {
        type: PropType<YMapRuler | null>;
        default: null;
    };
    settings: {
        type: PropType<YandexMapRulerSettings>;
        default: () => {};
    };
    pointProps: {
        type: PropType<Omit<ConstructorParameters<typeof YMapMarker>[0] & YandexMapMarkerCustomProps, "coordinates" | "draggable" | "source">>;
        default: () => {};
    };
    previewPointProps: {
        type: PropType<YandexMapMarkerCustomProps | "fromPointProps">;
        default: () => {};
    };
    /**
   * @description readonly-array with all points states
   */
    pointsState: {
        type: PropType<RenderPointArgs[]>;
        default: () => never[];
    };
}>> & Readonly<{
    onInput?: ((item: YMapRuler) => any) | undefined;
    "onUpdate:modelValue"?: ((item: YMapRuler) => any) | undefined;
    "onUpdate:pointsState"?: ((item: RenderPointCommonArgs[]) => any) | undefined;
}>, {
    value: YMapRuler | null;
    modelValue: YMapRuler | null;
    settings: YandexMapRulerSettings;
    pointProps: Omit<{
        coordinates: import('@yandex/ymaps3-types').LngLat;
        source?: string;
        zIndex?: number;
        properties?: Record<string, unknown>;
        id?: string;
        disableRoundCoordinates?: boolean;
        hideOutsideViewport?: import('@yandex/ymaps3-types').HideOutsideRule;
    } & import('@yandex/ymaps3-types/imperative/YMapFeature/types').DraggableProps<import('@yandex/ymaps3-types').YMapMarkerEventHandler> & import('@yandex/ymaps3-types/imperative/YMapFeature/types').BlockingProps & import('@yandex/ymaps3-types/imperative/YMapFeature/types').FeatureClickEvents & YandexMapMarkerCustomProps, "source" | "draggable" | "coordinates">;
    previewPointProps: YandexMapMarkerCustomProps | "fromPointProps";
    pointsState: RenderPointCommonArgs[];
}, SlotsType<{
    point: RenderPointCommonArgs;
    previewPoint: {};
}>, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
