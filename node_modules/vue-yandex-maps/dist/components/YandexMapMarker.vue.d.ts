import { YMapMarker } from '@yandex/ymaps3-types';
import { PropType, SlotsType } from 'vue';
import { YandexMapMarkerPosition } from '../types/marker.ts';
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    value: {
        type: PropType<YMapMarker | null>;
        default: null;
    };
    modelValue: {
        type: PropType<YMapMarker | null>;
        default: null;
    };
    settings: {
        type: PropType<ConstructorParameters<typeof YMapMarker>[0]>;
        required: true;
    };
    /**
 * @description Sets translate(%, %) to marker to align it properly.
 *
 * If you want to make aligment to be like Yandex Maps 2.0, set this property to "top left-center".
 * @default default (as goes in Yandex by default)
 */
    position: {
        type: PropType<YandexMapMarkerPosition>;
    };
    /**
 * @description Allows you to add any attributes to <div class="__ymap-marker"> container.
 *
 * Important: to pass styles, you must use object-style prop instead of string.
 */
    containerAttrs: {
        type: PropType<Record<string, any>>;
        default: () => {};
    };
    /**
 * @description Allows you to add any attributes to <div class="__ymap-marker_wrapper"> container.
 *
 * Important: to pass styles, you must use object-style prop instead of string.
 */
    wrapperAttrs: {
        type: PropType<Record<string, any>>;
        default: () => {};
    };
    /**
 * @description Will add width and height: 0 to container.
 *
 * Null enables default behavior, false disables it completely (even if position is specified).
 *
 * @default true if position is specified, false otherwise
 */
    zeroSizes: {
        type: PropType<boolean | null>;
        default: null;
    };
}>, () => import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    input(item: YMapMarker): boolean;
    'update:modelValue'(item: YMapMarker): boolean;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    value: {
        type: PropType<YMapMarker | null>;
        default: null;
    };
    modelValue: {
        type: PropType<YMapMarker | null>;
        default: null;
    };
    settings: {
        type: PropType<ConstructorParameters<typeof YMapMarker>[0]>;
        required: true;
    };
    /**
 * @description Sets translate(%, %) to marker to align it properly.
 *
 * If you want to make aligment to be like Yandex Maps 2.0, set this property to "top left-center".
 * @default default (as goes in Yandex by default)
 */
    position: {
        type: PropType<YandexMapMarkerPosition>;
    };
    /**
 * @description Allows you to add any attributes to <div class="__ymap-marker"> container.
 *
 * Important: to pass styles, you must use object-style prop instead of string.
 */
    containerAttrs: {
        type: PropType<Record<string, any>>;
        default: () => {};
    };
    /**
 * @description Allows you to add any attributes to <div class="__ymap-marker_wrapper"> container.
 *
 * Important: to pass styles, you must use object-style prop instead of string.
 */
    wrapperAttrs: {
        type: PropType<Record<string, any>>;
        default: () => {};
    };
    /**
 * @description Will add width and height: 0 to container.
 *
 * Null enables default behavior, false disables it completely (even if position is specified).
 *
 * @default true if position is specified, false otherwise
 */
    zeroSizes: {
        type: PropType<boolean | null>;
        default: null;
    };
}>> & Readonly<{
    onInput?: ((item: YMapMarker) => any) | undefined;
    "onUpdate:modelValue"?: ((item: YMapMarker) => any) | undefined;
}>, {
    value: YMapMarker | null;
    modelValue: YMapMarker | null;
    containerAttrs: Record<string, any>;
    wrapperAttrs: Record<string, any>;
    zeroSizes: boolean | null;
}, SlotsType<{
    default: {};
}>, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
